// Generated from src/parser/CPP14Lexer.g4 by ANTLR 4.9.0-SNAPSHOT


// 定义词法分析器头文件


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class CPP14Lexer extends Lexer {
	public static readonly CLASS = 1;
	public static readonly VOID = 2;
	public static readonly IF = 3;
	public static readonly ELSE = 4;
	public static readonly WHILE = 5;
	public static readonly FOR = 6;
	public static readonly OR = 7;
	public static readonly AND = 8;
	public static readonly ID = 9;
	public static readonly INT = 10;
	public static readonly WS = 11;
	public static readonly PLUS = 12;
	public static readonly MINUS = 13;
	public static readonly MUL = 14;
	public static readonly DIV = 15;
	public static readonly ASSIGN = 16;
	public static readonly LBRACKET = 17;
	public static readonly RBRACKET = 18;
	public static readonly COMMA = 19;
	public static readonly EQUAL = 20;
	public static readonly NOT_EQUAL = 21;
	public static readonly LT = 22;
	public static readonly GT = 23;
	public static readonly LE = 24;
	public static readonly GE = 25;
	public static readonly PLUSPLUS = 26;
	public static readonly MINUSMINUS = 27;
	public static readonly PLUS_ASSIGN = 28;
	public static readonly MINUS_ASSIGN = 29;
	public static readonly LPAREN = 30;
	public static readonly RPAREN = 31;
	public static readonly LBRACE = 32;
	public static readonly RBRACE = 33;
	public static readonly SEMI = 34;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"CLASS", "VOID", "IF", "ELSE", "WHILE", "FOR", "OR", "AND", "ID", "INT", 
		"WS", "PLUS", "MINUS", "MUL", "DIV", "ASSIGN", "LBRACKET", "RBRACKET", 
		"COMMA", "EQUAL", "NOT_EQUAL", "LT", "GT", "LE", "GE", "PLUSPLUS", "MINUSMINUS", 
		"PLUS_ASSIGN", "MINUS_ASSIGN", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
		"SEMI",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'class'", "'void'", "'if'", "'else'", "'while'", "'for'", 
		"'||'", "'&&'", undefined, undefined, undefined, "'+'", "'-'", "'*'", 
		"'/'", "'='", "'['", "']'", "','", "'=='", "'!='", "'<'", "'>'", "'<='", 
		"'>='", "'++'", "'--'", "'+='", "'-='", "'('", "')'", "'{'", "'}'", "';'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "CLASS", "VOID", "IF", "ELSE", "WHILE", "FOR", "OR", "AND", 
		"ID", "INT", "WS", "PLUS", "MINUS", "MUL", "DIV", "ASSIGN", "LBRACKET", 
		"RBRACKET", "COMMA", "EQUAL", "NOT_EQUAL", "LT", "GT", "LE", "GE", "PLUSPLUS", 
		"MINUSMINUS", "PLUS_ASSIGN", "MINUS_ASSIGN", "LPAREN", "RPAREN", "LBRACE", 
		"RBRACE", "SEMI",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(CPP14Lexer._LITERAL_NAMES, CPP14Lexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return CPP14Lexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(CPP14Lexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "CPP14Lexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return CPP14Lexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return CPP14Lexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return CPP14Lexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return CPP14Lexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02$\xB3\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\n\x03\n\x07" +
		"\nm\n\n\f\n\x0E\np\v\n\x03\v\x06\vs\n\v\r\v\x0E\vt\x03\f\x06\fx\n\f\r" +
		"\f\x0E\fy\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03" +
		"\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03" +
		"\x14\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17\x03" +
		"\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1B\x03" +
		"\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1D\x03\x1E\x03" +
		"\x1E\x03\x1E\x03\x1F\x03\x1F\x03 \x03 \x03!\x03!\x03\"\x03\"\x03#\x03" +
		"#\x02\x02\x02$\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07" +
		"\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E" +
		"\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14\'\x02" +
		"\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02\x1B5\x02\x1C7\x02" +
		"\x1D9\x02\x1E;\x02\x1F=\x02 ?\x02!A\x02\"C\x02#E\x02$\x03\x02\x06\x05" +
		"\x02C\\aac|\x06\x022;C\\aac|\x03\x022;\x05\x02\v\f\x0F\x0F\"\"\x02\xB5" +
		"\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02" +
		"\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02" +
		"\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02" +
		"\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02" +
		"\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02" +
		"!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03" +
		"\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02" +
		"\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x02" +
		"5\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02" +
		"\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02" +
		"\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x03G\x03\x02\x02\x02\x05M\x03" +
		"\x02\x02\x02\x07R\x03\x02\x02\x02\tU\x03\x02\x02\x02\vZ\x03\x02\x02\x02" +
		"\r`\x03\x02\x02\x02\x0Fd\x03\x02\x02\x02\x11g\x03\x02\x02\x02\x13j\x03" +
		"\x02\x02\x02\x15r\x03\x02\x02\x02\x17w\x03\x02\x02\x02\x19}\x03\x02\x02" +
		"\x02\x1B\x7F\x03\x02\x02\x02\x1D\x81\x03\x02\x02\x02\x1F\x83\x03\x02\x02" +
		"\x02!\x85\x03\x02\x02\x02#\x87\x03\x02\x02\x02%\x89\x03\x02\x02\x02\'" +
		"\x8B\x03\x02\x02\x02)\x8D\x03\x02\x02\x02+\x90\x03\x02\x02\x02-\x93\x03" +
		"\x02\x02\x02/\x95\x03\x02\x02\x021\x97\x03\x02\x02\x023\x9A\x03\x02\x02" +
		"\x025\x9D\x03\x02\x02\x027\xA0\x03\x02\x02\x029\xA3\x03\x02\x02\x02;\xA6" +
		"\x03\x02\x02\x02=\xA9\x03\x02\x02\x02?\xAB\x03\x02\x02\x02A\xAD\x03\x02" +
		"\x02\x02C\xAF\x03\x02\x02\x02E\xB1\x03\x02\x02\x02GH\x07e\x02\x02HI\x07" +
		"n\x02\x02IJ\x07c\x02\x02JK\x07u\x02\x02KL\x07u\x02\x02L\x04\x03\x02\x02" +
		"\x02MN\x07x\x02\x02NO\x07q\x02\x02OP\x07k\x02\x02PQ\x07f\x02\x02Q\x06" +
		"\x03\x02\x02\x02RS\x07k\x02\x02ST\x07h\x02\x02T\b\x03\x02\x02\x02UV\x07" +
		"g\x02\x02VW\x07n\x02\x02WX\x07u\x02\x02XY\x07g\x02\x02Y\n\x03\x02\x02" +
		"\x02Z[\x07y\x02\x02[\\\x07j\x02\x02\\]\x07k\x02\x02]^\x07n\x02\x02^_\x07" +
		"g\x02\x02_\f\x03\x02\x02\x02`a\x07h\x02\x02ab\x07q\x02\x02bc\x07t\x02" +
		"\x02c\x0E\x03\x02\x02\x02de\x07~\x02\x02ef\x07~\x02\x02f\x10\x03\x02\x02" +
		"\x02gh\x07(\x02\x02hi\x07(\x02\x02i\x12\x03\x02\x02\x02jn\t\x02\x02\x02" +
		"km\t\x03\x02\x02lk\x03\x02\x02\x02mp\x03\x02\x02\x02nl\x03\x02\x02\x02" +
		"no\x03\x02\x02\x02o\x14\x03\x02\x02\x02pn\x03\x02\x02\x02qs\t\x04\x02" +
		"\x02rq\x03\x02\x02\x02st\x03\x02\x02\x02tr\x03\x02\x02\x02tu\x03\x02\x02" +
		"\x02u\x16\x03\x02\x02\x02vx\t\x05\x02\x02wv\x03\x02\x02\x02xy\x03\x02" +
		"\x02\x02yw\x03\x02\x02\x02yz\x03\x02\x02\x02z{\x03\x02\x02\x02{|\b\f\x02" +
		"\x02|\x18\x03\x02\x02\x02}~\x07-\x02\x02~\x1A\x03\x02\x02\x02\x7F\x80" +
		"\x07/\x02\x02\x80\x1C\x03\x02\x02\x02\x81\x82\x07,\x02\x02\x82\x1E\x03" +
		"\x02\x02\x02\x83\x84\x071\x02\x02\x84 \x03\x02\x02\x02\x85\x86\x07?\x02" +
		"\x02\x86\"\x03\x02\x02\x02\x87\x88\x07]\x02\x02\x88$\x03\x02\x02\x02\x89" +
		"\x8A\x07_\x02\x02\x8A&\x03\x02\x02\x02\x8B\x8C\x07.\x02\x02\x8C(\x03\x02" +
		"\x02\x02\x8D\x8E\x07?\x02\x02\x8E\x8F\x07?\x02\x02\x8F*\x03\x02\x02\x02" +
		"\x90\x91\x07#\x02\x02\x91\x92\x07?\x02\x02\x92,\x03\x02\x02\x02\x93\x94" +
		"\x07>\x02\x02\x94.\x03\x02\x02\x02\x95\x96\x07@\x02\x02\x960\x03\x02\x02" +
		"\x02\x97\x98\x07>\x02\x02\x98\x99\x07?\x02\x02\x992\x03\x02\x02\x02\x9A" +
		"\x9B\x07@\x02\x02\x9B\x9C\x07?\x02\x02\x9C4\x03\x02\x02\x02\x9D\x9E\x07" +
		"-\x02\x02\x9E\x9F\x07-\x02\x02\x9F6\x03\x02\x02\x02\xA0\xA1\x07/\x02\x02" +
		"\xA1\xA2\x07/\x02\x02\xA28\x03\x02\x02\x02\xA3\xA4\x07-\x02\x02\xA4\xA5" +
		"\x07?\x02\x02\xA5:\x03\x02\x02\x02\xA6\xA7\x07/\x02\x02\xA7\xA8\x07?\x02" +
		"\x02\xA8<\x03\x02\x02\x02\xA9\xAA\x07*\x02\x02\xAA>\x03\x02\x02\x02\xAB" +
		"\xAC\x07+\x02\x02\xAC@\x03\x02\x02\x02\xAD\xAE\x07}\x02\x02\xAEB\x03\x02" +
		"\x02\x02\xAF\xB0\x07\x7F\x02\x02\xB0D\x03\x02\x02\x02\xB1\xB2\x07=\x02" +
		"\x02\xB2F\x03\x02\x02\x02\x06\x02nty\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!CPP14Lexer.__ATN) {
			CPP14Lexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(CPP14Lexer._serializedATN));
		}

		return CPP14Lexer.__ATN;
	}

}

